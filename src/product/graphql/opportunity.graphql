type Opportunity {
    id: ID!
    name: String!
    winPercentage: Float
    account: String!
    primaryContact: String
    closeDate: String
    estimatedRevenue: String
    riskLevel: Risk
    contacts: [Contact]
}

enum Risk {
  HIGH
  MEDIUM
  LOW
}

input CreateOpportunity { 
    name: String!
    winPercentage: Float
    account: String!
    primaryContact: String
    closeDate: String
    estimatedRevenue: String
    riskLevel: Risk
}

input UpdateOpportunity {
    name: String
    winPercentage: Float
    primaryContact: String
    closeDate: String
    estimatedRevenue: String
    riskLevel: Risk
}



type Query {
    getOpportunityByName(name: String!): Opportunity
    getOpportunityByAccount(account: String!): Opportunity
}

type Mutation {
    createOpportunity(createOpportunityInput: CreateOpportunity!): Opportunity!
    updateOpportunity(account: String!, updateOpportunityInput: UpdateOpportunity!): Opportunity!
    addContact(opportunityAccount: String!, contactEmail: String!): Opportunity!
    addPrimaryContact(opportunityAccount: String!, primaryContactEmail: String!): Opportunity!
    deleteOpportunity(opportunityAccount: String!): Boolean!
}